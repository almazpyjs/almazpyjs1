from __future__ import annotations

import json
from datetime import date, datetime, time, timezone
from typing import Iterable

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    BufferedInputFile,
    CallbackQuery,
    InlineKeyboardButton,
    Message,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ..database import Database, Event
from ..keyboards.main import (
    CalendarData,
    calendar_keyboard,
    duration_keyboard,
    event_actions_keyboard,
    events_keyboard,
    main_menu,
    reminder_default_keyboard,
    reminder_keyboard,
    time_keyboard,
    timezone_keyboard,
)
from ..states import CreateEvent, SettingsState
from ..utils.datetime import (
    apply_timezone,
    aware_utc,
    format_timedelta,
    parse_duration,
    parse_time,
    validate_timezone,
)


router = Router()


def _format_event(event: Event, tz_name: str) -> str:
    start_local = apply_timezone(event.start_time, tz_name)
    end_local = apply_timezone(event.end_time, tz_name)
    reminder_text = "–±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" if event.remind_before == 0 else f"–∑–∞ {event.remind_before} –º–∏–Ω"
    return (
        f"üìå <b>{event.title}</b>\n"
        f"üóì {start_local.strftime('%d.%m.%Y')} {start_local.strftime('%H:%M')} ‚Äî {end_local.strftime('%H:%M')}\n"
        f"‚è± {format_timedelta(event.duration_minutes)}\n"
        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}"
    )


def _events_overview(events: Iterable[Event], tz_name: str) -> str:
    lines = []
    for idx, event in enumerate(events, start=1):
        start_local = apply_timezone(event.start_time, tz_name)
        lines.append(
            f"{idx}. {start_local.strftime('%d.%m %H:%M')} ‚Äî {event.title}"
        )
    return "\n".join(lines) if lines else "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, database: Database) -> None:
    await state.clear()
    await database.ensure_user(message.from_user.id)
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∫–∞–ª–µ–Ω–¥–∞—Ä—å-–±–æ—Ç. –ü–æ–º–æ–≥—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è, –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –Ω–∏—Ö –∏ –¥–µ–ª–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç."\
        "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã: /new, /events, /export, /settings."
    )
    await message.answer(text, reply_markup=main_menu().as_markup())


@router.message(Command("new"))
async def cmd_new(message: Message, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(CreateEvent.waiting_for_title)
    await message.answer(
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —Å–æ–±—ã—Ç–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (—ç—Ç–æ –ø–æ–ª–µ –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—Ä—É—á–Ω—É—é)."
    )


@router.message(Command("events"))
async def cmd_events(message: Message, database: Database) -> None:
    user = await database.get_user(message.from_user.id)
    tz_name = user["timezone"] if user else "UTC"
    events = await database.list_events(message.from_user.id)
    text = _events_overview(events, tz_name)
    keyboard = InlineKeyboardBuilder()
    for event in events:
        label = event.title[:32]
        keyboard.button(text=label, callback_data=f"event:{event.id}:view")
    if events:
        keyboard.adjust(1)
    keyboard.attach(events_keyboard())
    keyboard.button(text="–ù–∞–∑–∞–¥", callback_data="menu:root")
    keyboard.adjust(1)
    await message.answer(text, reply_markup=keyboard.as_markup())


@router.message(Command("export"))
async def cmd_export(message: Message, database: Database) -> None:
    events = await database.list_events(message.from_user.id)
    if not events:
        await message.answer("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    user = await database.get_user(message.from_user.id)
    tz_name = user["timezone"] if user else "UTC"
    text_export = _events_overview(events, tz_name)
    json_export = json.dumps(
        [
            {
                "id": event.id,
                "title": event.title,
                "start": apply_timezone(event.start_time, tz_name).isoformat(),
                "duration_minutes": event.duration_minutes,
                "remind_before": event.remind_before,
            }
            for event in events
        ],
        ensure_ascii=False,
        indent=2,
    )
    await message.answer(text_export or "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π", reply_markup=events_keyboard().as_markup())
    await message.answer_document(
        BufferedInputFile(json_export.encode("utf-8"), filename="events.json"),
        caption="–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON",
    )


@router.message(Command("settings"))
async def cmd_settings(message: Message, database: Database) -> None:
    user = await database.get_user(message.from_user.id)
    tz_name = user["timezone"] if user else "UTC"
    default_reminder = int(user["reminder_default"]) if user else 15
    text = (
        f"–¢–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{tz_name}</b>\n"
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_reminder} –º–∏–Ω—É—Ç"
    )
    await message.answer(text, reply_markup=timezone_keyboard().as_markup())
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
        reply_markup=reminder_default_keyboard(default_reminder).as_markup(),
    )


@router.callback_query(F.data == "menu:create")
async def menu_create(callback: CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(CreateEvent.waiting_for_title)
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.")
    await callback.answer()


@router.callback_query(F.data == "menu:list")
async def menu_list(callback: CallbackQuery, database: Database) -> None:
    user = await database.get_user(callback.from_user.id)
    tz_name = user["timezone"] if user else "UTC"
    events = await database.list_events(callback.from_user.id)
    text = _events_overview(events, tz_name)
    keyboard = InlineKeyboardBuilder()
    for event in events:
        keyboard.button(text=event.title[:32], callback_data=f"event:{event.id}:view")
    if events:
        keyboard.adjust(1)
    keyboard.attach(events_keyboard())
    keyboard.button(text="–ù–∞–∑–∞–¥", callback_data="menu:root")
    keyboard.adjust(1)
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await callback.answer()


@router.callback_query(F.data == "menu:export")
async def menu_export(callback: CallbackQuery, database: Database) -> None:
    events = await database.list_events(callback.from_user.id)
    if not events:
        await callback.answer("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
        return
    user = await database.get_user(callback.from_user.id)
    tz_name = user["timezone"] if user else "UTC"
    overview = _events_overview(events, tz_name)
    json_export = json.dumps(
        [
            {
                "title": event.title,
                "start": apply_timezone(event.start_time, tz_name).isoformat(),
                "duration": event.duration_minutes,
                "remind_before": event.remind_before,
            }
            for event in events
        ],
        ensure_ascii=False,
        indent=2,
    )
    await callback.message.edit_text(overview, reply_markup=events_keyboard().as_markup())
    await callback.message.answer_document(
        BufferedInputFile(json_export.encode("utf-8"), filename="events.json"),
        caption="–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ JSON",
    )
    await callback.answer()


@router.callback_query(F.data == "menu:settings")
async def menu_settings(callback: CallbackQuery, database: Database) -> None:
    user = await database.get_user(callback.from_user.id)
    tz_name = user["timezone"] if user else "UTC"
    default_reminder = int(user["reminder_default"]) if user else 15
    text = (
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <b>{tz_name}</b>\n"
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_reminder} –º–∏–Ω—É—Ç"
    )
    await callback.message.edit_text(text, reply_markup=timezone_keyboard().as_markup())
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
        reply_markup=reminder_default_keyboard(default_reminder).as_markup(),
    )
    await callback.answer()


@router.callback_query(F.data == "menu:root")
async def menu_root(callback: CallbackQuery) -> None:
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu().as_markup())
    await callback.answer()


@router.message(CreateEvent.waiting_for_title)
async def process_title(message: Message, state: FSMContext) -> None:
    title = (message.text or "").strip()
    if not title:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    await state.update_data(title=title)
    await state.set_state(CreateEvent.waiting_for_date)
    today = date.today()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=calendar_keyboard(today).as_markup()
    )


@router.callback_query(CreateEvent.waiting_for_date, F.data == "calendar_today")
async def calendar_today(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.message.edit_reply_markup(calendar_keyboard(date.today()).as_markup())
    await callback.answer()


@router.callback_query(CreateEvent.waiting_for_date, F.data.startswith("calendar_prev"))
async def calendar_prev(callback: CallbackQuery, state: FSMContext) -> None:
    data = CalendarData.unpack(callback.data)
    target = date(year=data.year, month=data.month, day=1)
    await callback.message.edit_reply_markup(calendar_keyboard(target).as_markup())
    await callback.answer()


@router.callback_query(CreateEvent.waiting_for_date, F.data.startswith("calendar_next"))
async def calendar_next(callback: CallbackQuery, state: FSMContext) -> None:
    data = CalendarData.unpack(callback.data)
    target = date(year=data.year, month=data.month, day=1)
    await callback.message.edit_reply_markup(calendar_keyboard(target).as_markup())
    await callback.answer()


@router.callback_query(CreateEvent.waiting_for_date, F.data.startswith("calendar:"))
async def calendar_select(callback: CallbackQuery, state: FSMContext) -> None:
    data = CalendarData.unpack(callback.data)
    chosen_date = date(year=data.year, month=data.month, day=data.day or 1)
    await state.update_data(date=chosen_date.isoformat())
    await state.set_state(CreateEvent.waiting_for_time)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=time_keyboard().as_markup()
    )
    await callback.answer()


@router.callback_query(CreateEvent.waiting_for_time, F.data.startswith("time:"))
async def time_selected(callback: CallbackQuery, state: FSMContext) -> None:
    value = callback.data.split(":", maxsplit=1)[1]
    if value == "custom":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        await callback.answer()
        return
    result = parse_time(value)
    if result is None:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è", show_alert=True)
        return
    await state.update_data(time=result.strftime("%H:%M"))
    await state.set_state(CreateEvent.waiting_for_duration)
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", reply_markup=duration_keyboard().as_markup()
    )
    await callback.answer()


@router.message(CreateEvent.waiting_for_time)
async def custom_time(message: Message, state: FSMContext) -> None:
    result = parse_time(message.text or "")
    if result is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú")
        return
    await state.update_data(time=result.strftime("%H:%M"))
    await state.set_state(CreateEvent.waiting_for_duration)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", reply_markup=duration_keyboard().as_markup()
    )


@router.callback_query(CreateEvent.waiting_for_duration, F.data.startswith("duration:"))
async def duration_selected(callback: CallbackQuery, state: FSMContext, database: Database) -> None:
    value = callback.data.split(":", maxsplit=1)[1]
    if value == "custom":
        await state.set_state(CreateEvent.waiting_for_custom_duration)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 90 –∏–ª–∏ 1h30m)")
        await callback.answer()
        return
    minutes = int(value)
    await state.update_data(duration=str(minutes))
    await state.set_state(CreateEvent.waiting_for_reminder)
    await prompt_reminder(callback, database)
    await callback.answer()


@router.message(CreateEvent.waiting_for_custom_duration)
async def custom_duration(message: Message, state: FSMContext, database: Database) -> None:
    value = parse_duration(message.text or "")
    if value is None or value <= 0:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(duration=str(value))
    await state.set_state(CreateEvent.waiting_for_reminder)
    await prompt_reminder(message, database)


async def prompt_reminder(event_source: Message | CallbackQuery, database: Database) -> None:
    default_reminder = 15
    user = await database.get_user(event_source.from_user.id)
    if user:
        default_reminder = int(user["reminder_default"])
    markup = reminder_keyboard(default_reminder).as_markup()
    if isinstance(event_source, Message):
        await event_source.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:", reply_markup=markup)
    else:
        await event_source.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:", reply_markup=markup)


@router.callback_query(CreateEvent.waiting_for_reminder, F.data.startswith("reminder:"))
async def reminder_selected(callback: CallbackQuery, state: FSMContext, database: Database) -> None:
    value = callback.data.split(":", maxsplit=1)[1]
    user = await database.get_user(callback.from_user.id)
    default_reminder = int(user["reminder_default"]) if user else 15
    if value == "default":
        minutes = default_reminder
    else:
        minutes = int(value)
    data = await state.get_data()
    await finish_event_creation(callback, state, minutes, data, database)


async def finish_event_creation(
    callback: CallbackQuery,
    state: FSMContext,
    reminder_minutes: int,
    data: dict,
    database: Database,
) -> None:
    title = data.get("title")
    date_str = data.get("date")
    time_str = data.get("time")
    duration_str = data.get("duration")
    if not all([title, date_str, time_str, duration_str]):
        await callback.answer("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        await state.clear()
        return
    user = await database.get_user(callback.from_user.id)
    tz_name = user["timezone"] if user else "UTC"
    start_datetime = datetime.fromisoformat(f"{date_str}T{time_str}")
    start_utc = aware_utc(start_datetime, tz_name)
    duration_minutes = int(duration_str)
    await database.add_event(
        callback.from_user.id,
        title=title,
        start_time=start_utc,
        duration_minutes=duration_minutes,
        remind_before=reminder_minutes,
    )
    await state.clear()
    start_local = apply_timezone(start_utc, tz_name)
    summary = (
        f"–°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n{title}"
        f"\n–î–∞—Ç–∞: {start_local.strftime('%d.%m.%Y %H:%M')}"
        f"\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_timedelta(duration_minutes)}"
        f"\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {'–±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' if reminder_minutes == 0 else f'–∑–∞ {reminder_minutes} –º–∏–Ω—É—Ç'}"
    )
    await callback.message.answer(summary, reply_markup=main_menu().as_markup())
    await callback.answer("–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞")


@router.callback_query(F.data.startswith("event:"))
async def event_actions(callback: CallbackQuery, database: Database) -> None:
    parts = callback.data.split(":")
    if len(parts) < 3:
        await callback.answer()
        return
    _, event_id_str, action = parts[:3]
    event_id = int(event_id_str)
    if action == "view":
        event = await database.get_event(callback.from_user.id, event_id)
        if not event:
            await callback.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        user = await database.get_user(callback.from_user.id)
        tz_name = user["timezone"] if user else "UTC"
        await callback.message.edit_text(
            _format_event(event, tz_name),
            reply_markup=event_actions_keyboard(event.id).as_markup(),
        )
        await callback.answer()
    elif action == "delete":
        await database.delete_event(callback.from_user.id, event_id)
        await callback.message.edit_text(
            "–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=main_menu().as_markup()
        )
        await callback.answer("–£–¥–∞–ª–µ–Ω–æ")


@router.callback_query(F.data.startswith("events:"))
async def events_control(callback: CallbackQuery, database: Database) -> None:
    command = callback.data.split(":", maxsplit=1)[1]
    events = await database.list_events(callback.from_user.id)
    if command == "refresh":
        user = await database.get_user(callback.from_user.id)
        tz_name = user["timezone"] if user else "UTC"
        text = _events_overview(events, tz_name)
        keyboard = InlineKeyboardBuilder()
        for event in events:
            keyboard.button(text=event.title[:32], callback_data=f"event:{event.id}:view")
        if events:
            keyboard.adjust(1)
        keyboard.attach(events_keyboard())
        keyboard.button(text="–ù–∞–∑–∞–¥", callback_data="menu:root")
        keyboard.adjust(1)
        try:
            await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
        except TelegramBadRequest:
            await callback.message.answer(text, reply_markup=keyboard.as_markup())
        await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    elif command in {"export_txt", "export_json"}:
        user = await database.get_user(callback.from_user.id)
        tz_name = user["timezone"] if user else "UTC"
        if not events:
            await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        if command == "export_txt":
            text = _events_overview(events, tz_name)
            await callback.message.answer(text or "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π")
        else:
            payload = json.dumps(
                [
                    {
                        "title": event.title,
                        "start": apply_timezone(event.start_time, tz_name).isoformat(),
                        "duration": event.duration_minutes,
                        "remind_before": event.remind_before,
                    }
                    for event in events
                ],
                ensure_ascii=False,
                indent=2,
            )
            await callback.message.answer_document(
                BufferedInputFile(payload.encode("utf-8"), filename="events.json"),
                caption="–≠–∫—Å–ø–æ—Ä—Ç JSON",
            )
        await callback.answer()


@router.callback_query(F.data.startswith("tz:"))
async def timezone_change(callback: CallbackQuery, state: FSMContext, database: Database) -> None:
    value = callback.data.split(":", maxsplit=1)[1]
    if value == "custom":
        await state.set_state(SettingsState.waiting_for_timezone)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä Europe/Moscow")
        await callback.answer()
        return
    await database.update_user(callback.from_user.id, timezone_name=value)
    await callback.answer("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª—ë–Ω")


@router.message(SettingsState.waiting_for_timezone)
async def timezone_custom(message: Message, state: FSMContext, database: Database) -> None:
    tz_name = (message.text or "").strip()
    if not validate_timezone(tz_name):
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü—Ä–∏–º–µ—Ä: Europe/Moscow")
        return
    await database.update_user(message.from_user.id, timezone_name=tz_name)
    await state.clear()
    await message.answer(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {tz_name}", reply_markup=main_menu().as_markup())


@router.callback_query(F.data.startswith("settings_reminder:"))
async def settings_reminder(callback: CallbackQuery, database: Database) -> None:
    value = int(callback.data.split(":", maxsplit=1)[1])
    await database.update_user(callback.from_user.id, reminder_default=value)
    await callback.answer("–ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")


__all__ = ["router"]
